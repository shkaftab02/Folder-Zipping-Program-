import os
import zipfile

def zip_folder(folder_path, zip_name=None):
    """
    Compresses the specified folder into a .zip archive.

    :param folder_path: Path to the folder to be zipped.
    :param zip_name: Optional custom name for the output .zip file.
    """
    try:
        if not os.path.exists(folder_path) or not os.path.isdir(folder_path):
            print("Error: Provided path is invalid or not a directory.")
            return
        folder_name = os.path.basename(folder_path.rstrip(os.sep))
        zip_name = zip_name or f"{folder_name}.zip"
        zip_path = os.path.join(os.path.dirname(folder_path), zip_name)
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(folder_path):
                for file in files:
                    file_path = os.path.join(root, file)
                    arcname = os.path.relpath(file_path, folder_path)
                    zipf.write(file_path, arcname)
                for dir in dirs:
                    dir_path = os.path.join(root, dir)
                    if not os.listdir(dir_path):
                        arcname = os.path.relpath(dir_path, folder_path) + os.sep
                        zipf.write(dir_path, arcname)

        print(f"Success: Folder zipped as '{zip_path}'")

    except PermissionError:
        print("Error: Permission denied. Please check your access rights.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
def main():
    folder_path = input("Enter the full path of the folder to zip: ").strip()
    if not folder_path:
        print("Error: No folder path provided.")
        return
    custom_name = input("Enter a custom name for the zip file (or press Enter to use the folder name): ").strip()
    zip_folder(folder_path, custom_name if custom_name else None)

if __name__ == "__main__":
    main()
